import kivy
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.graphics import Color, Line
from kivy.core.window import Window
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.colorpicker import ColorPicker
from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout

class StartWindow(Popup):
    def __init__(self, start_callback, **kwargs):
        super().__init__(**kwargs)
        self.title = "Welcome"
        self.size_hint = (0.5, 0.5)

        start_label = Label(text='Welcome! Select a color in the "Color Menu" to start drawing.', size_hint=(1, 0.8))
        start_button = Button(text='Start', size_hint=(1, 0.2))
        start_button.bind(on_press=start_callback)

        self.content = BoxLayout(orientation='vertical')
        self.content.add_widget(start_label)
        self.content.add_widget(start_button)

class DrawingApp(App):
    def build(self):
        self.start_window = StartWindow(self.start_drawing)
        self.start_window.open()

        self.root = BoxLayout(orientation='vertical')
        self.canvas_widget = MyWidget()
        self.color_menu = ColorMenu(self.canvas_widget)
        self.thickness_menu = ThicknessMenu(self.canvas_widget)
        self.brush_menu = BrushMenu(self.canvas_widget)

        color_button = Button(text='Color Menu', size_hint=(1, 0.1))
        color_button.bind(on_press=self.color_menu.open)

        thickness_button = Button(text='Thickness Menu', size_hint=(1, 0.1))
        thickness_button.bind(on_press=self.thickness_menu.open)

        brush_button = Button(text='Brush Menu', size_hint=(1, 0.1))
        brush_button.bind(on_press=self.brush_menu.open)

        self.root.add_widget(color_button)
        self.root.add_widget(thickness_button)
        self.root.add_widget(brush_button)
        self.root.add_widget(self.canvas_widget)

        return self.root

    def start_drawing(self, instance):
        self.start_window.dismiss()

class MyWidget(Widget):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.color = (1, 0, 0)  # Initial color set to red
        self.line_width = 10
        self.brush_style = 'Style 1'
        self.touch_down = False

    def on_touch_down(self, touch):
        if touch.button == 'left':
            self.touch_down = True
            with self.canvas:
                Color(*self.color)
                Line(points=(touch.x, touch.y), width=self.line_width)

    def on_touch_move(self, touch):
        if self.touch_down:
            self.canvas.children[-1].points += [touch.x, touch.y]

    def on_touch_up(self, touch):
        if touch.button == 'right':
            self.touch_down = False

class ColorMenu(Popup):
    def __init__(self, canvas_widget, **kwargs):
        super().__init__(**kwargs)
        self.canvas_widget = canvas_widget
        self.color_picker = ColorPicker()
        self.color_picker.bind(color=self.set_color)
        self.content = self.color_picker

        close_button = Button(text='X', size_hint=(None, None), size=(50, 50), pos=(self.width - 50, self.height - 50))
        close_button.bind(on_press=self.dismiss)
        self.content.add_widget(close_button)

    def set_color(self, instance, value):
        self.canvas_widget.color = value

class ThicknessMenu(Popup):
    def __init__(self, canvas_widget, **kwargs):
        super().__init__(**kwargs)
        self.canvas_widget = canvas_widget
        self.grid = GridLayout(cols=3, spacing=10, padding=10)
        self.thickness_values = ['2', '5', '10', '15', '20', '25']
        for value in self.thickness_values:
            button = Button(text=value, size_hint=(None, None), size=(100, 50))
            button.bind(on_press=self.set_thickness)
            self.grid.add_widget(button)

        self.content = self.grid

        close_button = Button(text='X', size_hint=(None, None), size=(50, 50), pos=(self.width - 50, self.height - 50))
        close_button.bind(on_press=self.dismiss)
        self.content.add_widget(close_button)

    def set_thickness(self, instance):
        self.canvas_widget.line_width = int(instance.text)
        self.dismiss()

class BrushMenu(Popup):
    def __init__(self, canvas_widget, **kwargs):
        super().__init__(**kwargs)
        self.canvas_widget = canvas_widget
        self.grid = GridLayout(cols=2, spacing=10, padding=10)
        self.brush_styles = ['Style 1', 'Style 2']
        for style in self.brush_styles:
            button = Button(text=style, size_hint=(None, None), size=(100, 50))
            button.bind(on_press=self.set_brush_style)
            self.grid.add_widget(button)

        self.content = self.grid

        close_button = Button(text='X', size_hint=(None, None), size=(50, 50), pos=(self.width - 50, self.height - 50))
        close_button.bind(on_press=self.dismiss)
        self.content.add_widget(close_button)

    def set_brush_style(self, instance):
        self.canvas_widget.brush_style = instance.text
        self.dismiss()

if __name__ == '__main__':
    Window.clearcolor = (1, 1, 1, 1)  # Set white background color
    DrawingApp().run()
